import sys
import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from mplfinance.original_flavor import candlestick2_ohlc
import webbrowser
import telegram

class MyWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("실전차트")
        screen_rect = app.desktop().screenGeometry()
        width,height = screen_rect.width(), screen_rect.height() 
        self.setGeometry(0,0,width,height)

        self.fig = plt.Figure()
        self.canvas = FigureCanvas(self.fig)

        self.ticker = []
        with open("crypto.txt", "r") as f:
            example = f.readlines()
            for line in example:
                app_list = line.strip()
                self.ticker.append(app_list)
                
        time_frame = ['1h', '4h', '1d', '1w', '15m', '5m', '1m']

        self.pbar = QProgressBar(self)
        self.pbar.setRange(0,len(self.ticker)-1)
        self.pbar.setMaximumHeight(20)
        self.pbar.setMaximumWidth(150)
        self.textbox = QLabel(self)
        self.textbox.setMaximumHeight(20)
        self.textbox.setMaximumWidth(150)
        self.btc = QComboBox(self)
        self.btc.addItems(self.ticker)
        self.btc.setMaximumHeight(20)
        self.btc.setMaximumWidth(150)
        self.tf = QComboBox(self)
        self.tf.addItems(time_frame)
        self.tf.setMaximumHeight(20)
        self.tf.setMaximumWidth(150)
        self.spinbox2 = QSpinBox()
        self.spinbox2.setMaximumHeight(20)
        self.spinbox2.setMaximumWidth(150)
        self.button = QPushButton("거래량 등락률 상위",self)
        self.button.setMaximumHeight(20)
        self.button.setMaximumWidth(150)
        self.atr = QPushButton("ATR",self)
        self.atr.setMaximumHeight(20)
        self.atr.setMaximumWidth(150)
        self.signal = QPushButton("추세반전",self)
        self.signal.setMaximumHeight(20)
        self.signal.setMaximumWidth(150)
        self.practal = QPushButton("BTC/USDT 프랙탈",self)
        self.practal.setMaximumHeight(20)
        self.practal.setMaximumWidth(150)
        self.spinbox = QSpinBox()
        self.spinbox.setMaximumHeight(20)
        self.spinbox.setMaximumWidth(150)
        self.slipage = QPushButton("슬리피지 예상",self)
        self.slipage.setMaximumHeight(20)
        self.slipage.setMaximumWidth(150)
        self.line_edit = QLineEdit("", self)
        self.line_edit.setMaximumHeight(20)
        self.line_edit.setMaximumWidth(150)
        self.trv = QPushButton("TradingView", self)
        self.trv.setMaximumHeight(20)
        self.trv.setMaximumWidth(150)
        self.send = QPushButton("Telegram", self)
        self.send.setMaximumHeight(20)
        self.send.setMaximumWidth(150)

        self.button.clicked.connect(self.PrintCryptoRate)
        self.atr.clicked.connect(self.atrrate)
        self.signal.clicked.connect(self.fibonacci)
        self.practal.clicked.connect(self.past)
        self.spinbox.setRange(0,30)
        self.spinbox2.setRange(150,600)
        self.spinbox.valueChanged.connect(self.doGraph1)
        self.spinbox2.textChanged.connect(self.onComboBoxChanged)
        self.slipage.clicked.connect(self.slipage_calculate)
        self.line_edit.returnPressed.connect(self.TextFunction)
        self.btc.activated[str].connect(self.ChooseFuntion)
        self.tf.activated[str].connect(self.onComboBoxChanged)
        self.trv.clicked.connect(self.traidingview)
        self.send.clicked.connect(self.telegram)

        self.fv = QGroupBox('거래량 상승률 Ranking')
        self.ov = QGroupBox('당일 거래량  상승률 Ranking')
        self.fv.resize(200,height)
        self.fv.setMaximumWidth(200)
        self.ov.resize(200,height)
        self.ov.setMaximumWidth(200)

        lefttable2 = QGroupBox('')
        lefttable2.resize(150,int(height*0.2))
        lefttable2.setMaximumWidth(150)
        wbox = QVBoxLayout()
        wbox.addWidget(self.button)
        wbox.addWidget(self.atr)
        wbox.addWidget(self.signal)
        wbox.addWidget(self.practal)
        wbox.addWidget(self.spinbox)
        wbox.addWidget(self.slipage)
        lefttable2.setLayout(wbox)

        lefttable = QGroupBox('')
        lefttable.resize(150,int(height*0.6))
        lefttable.setMaximumWidth(150)
        vbox = QVBoxLayout()
        vbox.addWidget(self.btc)
        vbox.addWidget(self.line_edit)
        vbox.addWidget(self.tf)
        vbox.addWidget(self.spinbox2)
        vbox.addWidget(self.trv)
        vbox.addWidget(self.send)
        lefttable.setLayout(vbox)

        table = QVBoxLayout()
        table.addWidget(self.fv)
        table.addWidget(self.ov)

        self.fvbox = QVBoxLayout()
        self.fv.setLayout(self.fvbox)
        self.ovbox = QVBoxLayout()
        self.ov.setLayout(self.ovbox)

        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.canvas)

        box = QVBoxLayout()
        box.addWidget(self.pbar)
        box.addWidget(self.textbox)
        box.addWidget(lefttable2)
        box.addWidget(lefttable)

        layout = QHBoxLayout()
        layout.addLayout(box)
        layout.addLayout(mainLayout)
        layout.addLayout(table)

        self.setLayout(layout)   

    def atrrate(self):
        try:
            self.textbox.setText(" ")
            k, ok = QInputDialog.getInt(self, 'ATR', 'Time', 3, min=3, max=30)
            binance = ccxt.binance({"options" : {"defaultType" : "future"}, "enableRateLimit" : True})

            def atr(x):
                btc = binance.fetch_ohlcv(symbol=x, timeframe="1h", limit=k+12)
                data = pd.DataFrame(btc, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
                data['datetime'] = pd.to_datetime(data['datetime'], unit='ms')
                data.set_index('datetime', inplace=True)
                rate = data.iloc[-1]['close'] - data.iloc[-k]['open']

                high_low = data['high'] - data['low']
                high_close = np.abs(data['high'] - data['close'].shift())
                low_close = np.abs(data['low'] - data['close'].shift())
                ranges = pd.concat([high_low, high_close, low_close], axis=1)
                true_range = np.max(ranges, axis=1)
                atr = true_range.rolling(14).sum()/14
                return round(rate/atr[-1],4)

            btc = abs(atr("BTC/USDT"))

            coin = self.ticker
            correlrate = []
            for a in range(0,len(coin)):
                correlrate.append(round(atr(coin[a])/btc,4))
                self.pbar.setValue(int(a))

            df = pd.DataFrame(index = range(0,len(coin)),columns=['name','correlrate'])
            df['name'] = coin
            df['correlrate'] = correlrate
            df = df.sort_values('correlrate')
            
            ftext=[]
            mtext=[]
            for a in range(15):
                ftext.append(str(df.iloc[a]['name']) + "  :  " + str(df.iloc[a]['correlrate']))
                mtext.append(str(df.iloc[-15+a]['name']) + "   :   " + str(df.iloc[-15+a]['correlrate']))
                if self.fvbox.count() >= 1:
                    self.fvbox.itemAt(a).widget().deleteLater()
                    self.ovbox.itemAt(a).widget().deleteLater()
            self.fradiobtns = []         
            self.mradiobtns = []
            for i in range(15):
                self.fradiobtns.append(QLabel(ftext[i], self))
                self.fvbox.addWidget(self.fradiobtns[i])
                self.mradiobtns.append(QLabel(mtext[i], self))
                self.ovbox.addWidget(self.mradiobtns[i])
        except Exception as e:
            print(str(e))

    def fibonacci(self):
        try:
            self.textbox.setText(" ")
            self.fig.clear()
            def myRSI(price, n=14):
                delta = price['close'].diff()
                dUp, dDown = delta.copy(), delta.copy()
                dUp[dUp < 0] = 0
                dDown[dDown > 0] = 0

                RolUp = dUp.rolling(window=n).mean()
                RolDown = dDown.rolling(window=n).mean().abs()
                    
                RS = RolUp / RolDown
                rsi= 100.0 - (100.0 / (1.0 + RS))
                return rsi

            def pivotid(df1, l, n1, n2): #n1 n2 before and after candle l
                if l-n1 < 0 or l+n2 >= len(df1):
                    return 0
                    
                pividlow=1
                pividhigh=1
                for i in range(l-n1, l+n2+1):
                    if(df1.low[l]>df1.low[i]):
                        pividlow=0
                    if(df1.high[l]<df1.high[i]):
                        pividhigh=0
                if pividlow and pividhigh:
                    return 3
                elif pividlow:
                    return 1
                elif pividhigh:
                    return 2
                else:
                    return 0

            def RSIpivotid(df1, l, n1, n2): #n1 n2 before and after candle l
                if l-n1 < 0 or l+n2 >= len(df1):
                    return 0

                pividlow=1
                pividhigh=1
                for i in range(l-n1, l+n2+1):
                    if(df1.RSI[l]>df1.RSI[i]):
                        pividlow=0
                    if(df1.RSI[l]<df1.RSI[i]):
                        pividhigh=0
                if pividlow and pividhigh:
                    return 3
                elif pividlow:
                    return 1
                elif pividhigh:
                    return 2
                else:
                    return 0 

            def pointpos(x):
                if x['pivot']==1:
                    return x['low']-1e-3
                elif x['pivot']==2:
                    return x['high']+1e-3
                else:
                    return np.nan

            def RSIpointpos(x):
                if x['RSIpivot']==1:
                    return x['RSI']-1
                elif x['RSIpivot']==2:
                    return x['RSI']+1
                else:
                    return np.nan

            def divsignal2(x, nbackcandles):
                backcandles=nbackcandles 
                candleid = int(x.name)

                closp = np.array([])
                xxclos = np.array([])
                
                maxim = np.array([])
                minim = np.array([])

                maximRSI = np.array([])
                minimRSI = np.array([])

                for i in range(candleid-backcandles, candleid+1):
                    closp = np.append(closp, df.iloc[i].close)
                    xxclos = np.append(xxclos, i)
                    if df.iloc[i].pivot == 1:
                        minim = np.append(minim, df.iloc[i].low)
                    if df.iloc[i].pivot == 2:
                        maxim = np.append(maxim, df.iloc[i].high)
                    if df.iloc[i].RSIpivot == 1:
                        minimRSI = np.append(minimRSI, df.iloc[i].RSI)
                    if df.iloc[i].RSIpivot == 2:
                        maximRSI = np.append(maximRSI, df.iloc[i].RSI)

                slclos, interclos = np.polyfit(xxclos, closp,1)
                    
                if slclos > 1e-4 and (maximRSI.size<2 or maxim.size<2):
                    return 0
                if slclos < -1e-4 and (minimRSI.size<2 or minim.size<2):
                    return 0
                # signal decisions here !!!
                if slclos > 1e-4:
                    if maximRSI[-1]<maximRSI[-2] and maxim[-1]>maxim[-2]:
                        return 0
                elif slclos < -1e-4:
                    if minimRSI[-1]>minimRSI[-2] and minim[-1]<minim[-2]:
                        return 2
                else:
                    return 1

            text, ok = QInputDialog.getText(self, "티커명", "티커명 : ")
            items = {"1h","4h","1d"}
            tf, ok = QInputDialog.getItem(self, "캔들 종류", "캔들 종류", items)

            binance = ccxt.binance({"options" : {"defaultType" : "future"}, "enableRateLimit" : True})
            symbol = text.upper() + str("/USDT")
            btc = binance.fetch_ohlcv(symbol=symbol, timeframe=tf, limit=100)
            df = pd.DataFrame(btc, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
            df['datetime'] = pd.to_datetime(df['datetime'], unit='ms')
            df.set_index('datetime', inplace=True)

            df['RSI'] = myRSI(df)
            df.dropna(inplace=True)
            df.reset_index(drop=True, inplace=True)
            df.isna().sum()

            df['pivot'] = df.apply(lambda x: pivotid(df, x.name,3,3), axis=1)
            df['RSIpivot'] = df.apply(lambda x: RSIpivotid(df, x.name,3,3), axis=1)

            df['pointpos'] = df.apply(lambda row: pointpos(row), axis=1)
            df['RSIpointpos'] = df.apply(lambda row: RSIpointpos(row), axis=1)

            df['divSignal2'] = df.apply(lambda row: divsignal2(row,30), axis=1)
            df['divSignal2'] = df['divSignal2'] * df['RSI']

            df['upper'] = df['close'].rolling(window=20).mean() + 2*df['close'].rolling(window=20).std()
            df['lower'] = df['close'].rolling(window=20).mean() - 2*df['close'].rolling(window=20).std()

            gs = gridspec.GridSpec(nrows=2, ncols=1, height_ratios=[3,1])
            ax1 = self.fig.add_subplot(gs[0], title="RSI < Signal : Buy, RSI > Signal : Sell, RSI = Signal : Neutral")
            ax2 = self.fig.add_subplot(gs[1])
            x = np.arange(len(df.index))

            candlestick2_ohlc(ax1, df['open'], df['high'], df['low'], df['close'], width=0.8, colorup='green', colordown='red')
            ax1.plot(x, df['upper'], c = 'yellow')
            ax1.plot(x, df['lower'], c = 'purple')
            ax1.scatter(x, df['pointpos'], c='k')

            ax2.plot(x, df['RSI'])
            ax2.scatter(x, df['RSIpointpos'], c='k')
            ax2.scatter(x, df['divSignal2'], c='red')

            ax1.axes.xaxis.set_visible(False)
            ax2.axes.xaxis.set_visible(False)
            plt.tight_layout()
            self.canvas.draw()
        except Exception as e:
            self.textbox.setText("ERROR - Misspelled")

    def past(self):
        try:
            self.textbox.setText(" ")
            self.fig.clear()
            self.le, ok = QInputDialog.getInt(self, 'PRACTAL', 'BTC/USDT', 100, min=20, max=150)

            binance = ccxt.binance()
            self.result = pd.DataFrame(columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
            x = 19
            timethoushand = 1000
            while x > 0:
                now = datetime.today() - timedelta(hours=timethoushand*x)
                since = round(now.timestamp()*1000)

                btc = binance.fetch_ohlcv(symbol="BTC/USDT", timeframe='1h', since=since, limit=1000)
                data = pd.DataFrame(btc, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
                data['datetime'] = pd.to_datetime(data['datetime'], unit='ms')
                data.set_index('datetime', inplace=True)
                x = x-1
                self.result = pd.concat([self.result, data])

            self.result = self.result.drop(['datetime'], axis='columns')
            
            btc_ohlcv = binance.fetch_ohlcv(symbol="BTC/USDT", timeframe='1h', limit=self.le)
            com = pd.DataFrame(btc_ohlcv, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
            com['datetime'] = pd.to_datetime(com['datetime'], unit='ms')
            com.set_index('datetime', inplace=True)
            close = com['close']
            close = close[:self.le]

            base = (close - np.min(close)) / (np.max(close) - np.min(close))
            w = len(base)
            move = len(self.result) - w - self.le
            sim = []
            for i in range(move):
                t = self.result.iloc[i:i+w]['close']
                base2 = (t - np.min(t)) / (np.max(t) - np.min(t))
                a = np.dot(base, base2) / (np.sqrt(np.dot(base, base)) * np.sqrt(np.dot(base2, base2)))
                sim.append(a)
                self.pbar.setValue(int(i/100))
            self.ser = pd.Series(sim).sort_values(ascending=False).head(30)

            i = self.ser.index[0]
            df = self.result.iloc[i:i+self.le*2]
            date_name = (df.index[0] + timedelta(hours=int(self.le))).strftime("%Y-%m-%d %Hh")
            gs = gridspec.GridSpec(nrows=2, ncols=1, height_ratios=[3,1])
            ax1 = self.fig.add_subplot(gs[0], title=date_name + "  " +str(round((self.ser.iloc[0]*100),2))+"%")
            ax2 = self.fig.add_subplot(gs[1])
            candlestick2_ohlc(ax1, df['open'], df['high'], df['low'], df['close'], width=0.8, colorup='green', colordown='red')
            x = np.arange(len(df.index))
            ax1.axvline(x = int(self.le), c='grey', linestyle='--')

            color_fuc = lambda x : 'green' if x >= 0 else 'red'
            df['close'].diff().fillna(0)
            color_df = df['close'].diff().fillna(0).apply(color_fuc)
            color_list = list(color_df)

            ax2.bar(x, df['volume'], color=color_list)
            ax1.axes.xaxis.set_visible(False)
            ax2.axes.xaxis.set_visible(False)
            plt.tight_layout()
            self.canvas.draw()
        except Exception as e:
            self.textbox.setText("ERROR - Restart")

    def doGraph1(self):
        try:
            self.textbox.setText(" ")
            self.fig.clear()
            k = int(self.spinbox.value())
            i = self.ser.index[k]
            df = self.result.iloc[i:i+self.le*2]
            date_name = (df.index[0] + timedelta(hours=100)).strftime("%Y-%m-%d %Hh")
            gs = gridspec.GridSpec(nrows=2, ncols=1, height_ratios=[3,1])
            ax1 = self.fig.add_subplot(gs[0], title=date_name + "  " +str(round((self.ser.iloc[k]*100),2))+"%")
            ax2 = self.fig.add_subplot(gs[1])
            candlestick2_ohlc(ax1, df['open'], df['high'], df['low'], df['close'], width=0.8, colorup='green', colordown='red')
            x = np.arange(len(df.index))
            ax1.axvline(x = int(self.le), c='grey', linestyle='--')

            color_fuc = lambda x : 'green' if x >= 0 else 'red'
            df['close'].diff().fillna(0)
            color_df = df['close'].diff().fillna(0).apply(color_fuc)
            color_list = list(color_df)

            ax2.bar(x, df['volume'], color=color_list)
            ax1.axes.xaxis.set_visible(False)
            ax2.axes.xaxis.set_visible(False)
            plt.tight_layout()
            self.canvas.draw()
        except Exception as e:
            self.textbox.setText("ERROR - Restart")

    def slipage_calculate(self):
        try:
            self.textbox.setText(" ")
            text, ok = QInputDialog.getText(self, "호가창&슬리피지", "티커명 : ")
            items = {"Long", "Short"}
            pos, ok = QInputDialog.getItem(self, "호가창&슬리피지", "롱/숏", items)

            ticker = text.upper() + str("/USDT")
            amount, ok = QInputDialog.getInt(self, '호가창&슬리피지', '총 금액($)',10000)

            exchange = ccxt.binance({"options" : {"defaultType" : "future"}, "enableRateLimit" : True})
            orderbook = exchange.fetch_order_book(ticker)
            if pos == "Long":
                oderbuk = "asks"
            elif pos == "Short":
                oderbuk = "bids"
            hap = 0
            start = orderbook[oderbuk][0][0]
            for i in orderbook[oderbuk]:
                hap = hap + (float(i[0])*float(i[-1]))
                last = float(i[0])
                if hap > amount:
                    break

            s = abs(last/start-1)*100
            self.textbox.setText("슬리피지 : "+str(round(s,3))+"%")
        except Exception as e:
                self.textbox.setText("ERROR - Restart")

    def TextFunction(self):
        self.coin = self.line_edit.text().upper() + str("/USDT")
        self.onComboBoxChanged()

    def ChooseFuntion(self):
        self.coin = self.btc.currentText()
        self.onComboBoxChanged()

    def onComboBoxChanged(self):
        try:
            self.textbox.setText(" ")
            self.fig.clear()
            binance = ccxt.binance({"options" : {"defaultType" : "future"}, "enableRateLimit" : True})

            coin = str(self.coin)
            tf = self.tf.currentText()
            k = int(self.spinbox2.value())+1
            btc = binance.fetch_ohlcv(symbol=coin, timeframe=tf, limit=k)
            data = pd.DataFrame(btc, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
            data['datetime'] = pd.to_datetime(data['datetime'], unit='ms')
            data.set_index('datetime', inplace=True)

            hist = []
            for a in range(1,len(data)):
                if data.iloc[a]['high'] - data.iloc[a]['close'] > data.iloc[a]['close'] - data.iloc[a]['low']:
                    hist.append(data.iloc[a]['high'])
                elif data.iloc[a]['high'] - data.iloc[a]['close'] < data.iloc[a]['close'] - data.iloc[a]['low']:
                    hist.append(data.iloc[a]['low'])
                else:
                    if data.iloc[a]['close'] < data.iloc[a-1]['close']:
                        hist.append(data.iloc[a]['low'])
                    elif data.iloc[a]['close'] > data.iloc[a-1]['close']:
                        hist.append(data.iloc[a]['high'])
                    else:
                        hist.append(data.iloc[a]['close'])
            data = data[1:]

            gs = gridspec.GridSpec(nrows=2, ncols=1, height_ratios=[3,1])
            ax1 = self.fig.add_subplot(gs[0], title=str(data.iloc[-1]['close']))
            ax3 = self.fig.add_subplot(gs[1])

            candlestick2_ohlc(ax1, data['open'], data['high'], data['low'], data['close'], width=0.8, colorup='green', colordown='red')
            ax2 = ax1.twiny()
            ax2.hist(hist,weights = data['volume'],orientation='horizontal',bins=30,color='skyblue')
            ax1.set_zorder(ax2.get_zorder() + 10)
            ax1.patch.set_visible(False)

            x = np.arange(len(data.index))
            color_fuc = lambda x : 'green' if x >= 0 else 'red'
            data['close'].diff().fillna(0)
            color_df = data['close'].diff().fillna(0).apply(color_fuc)
            color_list = list(color_df)

            ax3.bar(x, data['volume'], color=color_list)
            ax1.axes.xaxis.set_visible(False)
            ax3.axes.xaxis.set_visible(False)

            plt.tight_layout()
            self.canvas.draw()
        except Exception as e:
            self.textbox.setText("ERROR - Misspelled")

    def PrintCryptoRate(self):
        try:
            self.textbox.setText(" ")
            items = {"Yesterday", "Today"}
            items2 = {"1h", "4h", "1w", "15m"}
            date, ok = QInputDialog.getItem(self, "Date", "Date", items)
            tf, ok = QInputDialog.getItem(self, "TimeFrame", "TimeFrame", items2)
            if date == "Yesterday":
                d = 0
            else:
                d = 1

            binance = ccxt.binance({"options" : {"defaultType" : "future"}, "enableRateLimit" : True})
            coin = self.ticker
            gr = pd.DataFrame(index=range(0,len(coin)), columns=['name', 'fprate', 'fvrate', 'mprate', 'hprate', 'mvrate', 'hvrate'])
            for a in range(0,len(coin)):
                btc = binance.fetch_ohlcv(symbol=coin[a], timeframe=tf, limit=3)
                df = pd.DataFrame(btc, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
                gr.loc[a]['name'] = str(coin[a])
                gr.loc[a]['mprate'] = round((df.iloc[1+d]['close']/df.iloc[1+d]['open']-1)*100,2)
                gr.loc[a]['mvrate'] = int((df.iloc[1+d]['volume']/df.iloc[0+d]['volume']-1)*100)
                eth = binance.fetch_ohlcv(symbol=coin[a], timeframe="1d", limit=3)
                data = pd.DataFrame(eth, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
                gr.loc[a]['hprate'] = round((data.iloc[1+d]['close']/data.iloc[1+d]['open']-1)*100,2)
                gr.loc[a]['hvrate'] = int((data.iloc[1+d]['volume']/data.iloc[0+d]['volume']-1)*100)
                self.pbar.setValue(int(a))

            fp = pd.Series(gr['mvrate']).sort_values(ascending=False).head(15)
            mp = pd.Series(gr['hvrate']).sort_values(ascending=False).head(15)
            ftext=[]
            mtext=[]
            for a in range(15):
                ftext.append(str(coin[fp.index[a]])+" : "+str(gr.loc[fp.index[a]]['mprate'])+"%  "+str(gr.loc[fp.index[a]]['mvrate'])+"%")
                mtext.append(str(coin[mp.index[a]])+" : "+str(gr.loc[mp.index[a]]['hprate'])+"%  "+str(gr.loc[mp.index[a]]['hvrate'])+"%")
                if self.fvbox.count() >= 1:
                    self.fvbox.itemAt(a).widget().deleteLater()
                    self.ovbox.itemAt(a).widget().deleteLater()
            self.fradiobtns = []         
            self.mradiobtns = []
            for i in range(15):
                self.fradiobtns.append(QLabel(ftext[i], self))
                self.fvbox.addWidget(self.fradiobtns[i])
                self.mradiobtns.append(QLabel(mtext[i], self))
                self.ovbox.addWidget(self.mradiobtns[i])
        except Exception as e:
            self.textbox.setText("ERROR - Restart")
    
    def telegram(self):
        try:
            binance = ccxt.binance({"options" : {"defaultType" : "future"}, "enableRateLimit" : True})
            bot = telegram.Bot(token='5460027707:AAH-p6WPMFjBBg0TMYc-UbxplfBRew6iR1c')
            chat_id = -1001604265138
            self.textbox.setText(" ")
            self.fig.clear()
            text, ok = QInputDialog.getText(self, "티커명", "티커명 : ")
            text = text.upper() + str("USDT")
            items = {"Long", "Short"}
            option, ok = QInputDialog.getItem(self, "Position", "Position", items)

            btc = binance.fetch_ohlcv(symbol=text, timeframe='1h', limit=2)
            df = pd.DataFrame(btc, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
            df['datetime'] = pd.to_datetime(df['datetime'], unit='ms')
            df.set_index('datetime', inplace=True)

            bot.sendMessage(chat_id = chat_id, text=str(text)+"  "+str(df.iloc[-1]['close'])+"  "+str(option))
        except Exception as e:
            self.textbox.setText("ERROR - Restart")
            
    def traidingview(self):
        try:
            self.textbox.setText(" ")
            self.fig.clear()
            text, ok = QInputDialog.getText(self, "티커명", "티커명 : ")

            text = text.upper() + str("USDT")
            address = "https://kr.tradingview.com/chart/?symbol=BINANCE%3A"+text

            webbrowser.open(address)
        except Exception as e:
            self.textbox.setText("ERROR - Restart")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
