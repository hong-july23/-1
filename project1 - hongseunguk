import time
import pyupbit
import datetime
import pandas as pd

access = "your-access"                   #<<<<<<----- 업비트 api 키
secret = "your-secret"                   #<<<<<<----- 업비트 시크릿 키
k = 0.2                                  #<<<<<<----- k값
switch = 0

def get_coin():
    data = []
    coin = []
    cryptoc = pyupbit.get_tickers(fiat="KRW")
    a = 0
    while a < 110:
        df = pyupbit.get_ohlcv(cryptoc[a], interval = "day", count = 12)
        ma = df['close'].rolling(window=10).mean()
        v = df.iloc[-1]['volume'] * ma.iloc[-1]
        data.append(v)
        a = a + 1
        time.sleep(0.1)
    data.sort()
    middle = int(data[50])

    cryptoc = pyupbit.get_tickers(fiat="KRW")
    a = 0
    while a < 110:
        df = pyupbit.get_ohlcv(cryptoc[a], interval = "day", count = 12)
        ma = df['close'].rolling(window=10).mean()
        k = int(df.iloc[-1]['volume'])
        p = int(ma.iloc[-1])
        if k * p > middle:
            coin.append(cryptoc[a])
        a = a + 1
        time.sleep(0.1)
    return coin

def get_ticker():
    cryptoc = pyupbit.get_tickers(fiat="KRW")
    a = 0
    while True:
        try:
            cur = pyupbit.get_current_price(cryptoc[a])
            df = pyupbit.get_ohlcv(cryptoc[a], interval="day", count=2)
            target_price = df.iloc[0]['close'] + (df.iloc[0]['high'] - df.iloc[0]['low']) * k
            
            if target_price * 0.9998 < cur < target_price * 1.003:
                ticker = cryptoc[a]
                break
            a = a + 1
            
            if a == 110:
                a = a - 110
                print("looking for crypto currency to buy...")
        except Exception as e:
            time.sleep(0.02)
    return ticker

def get_ws(ticker):
    ws = 0
    data = pyupbit.get_ohlcv(ticker, interval="minute60")
    closedata = data["close"]
    delta = closedata.diff()
    ups, downs = delta.copy(), delta.copy() 
    ups[ups < 0] = 0 
    downs[downs > 0] = 0 
    period = 25 
    au = ups.ewm(com = period-1, min_periods = period).mean() 
    ad = downs.abs().ewm(com = period-1, min_periods = period).mean()
    rsi = au/(au+ad) * 100

    end = data.iloc[-2]['close']
    top = data.iloc[-2]['high']

    ma20 = data['close'].rolling(window=20).mean()
    upper = ma20 + 2 * data['close'].rolling(window=20).std()
    if rsi.iloc[-2] > 70 and top > upper.iloc[-2] > end:
        ws = 1
    elif rsi.iloc[-2] >= 70 and rsi.iloc[-1] < 70:
        ws = 1
    return ws

def get_ws2(ticker):
    a = []
    i = 0
    df = pyupbit.get_ohlcv(ticker, interval = "day")
    ma30 = df['close'].rolling(window=30).mean()
    ma60 = df['close'].rolling(window=60).mean()
    ma120 = df['close'].rolling(window=120).mean()
    ma180 = df['close'].rolling(window=180).mean()
    ma360 = df['close'].rolling(window=360).mean()
    yes = [ma30.iloc[-1],ma60.iloc[-1],ma120.iloc[-1],ma180.iloc[-1],ma360.iloc[-1]]
    standard = df.iloc[-1]['open'] * 1.1
    for g in yes:
        if g > standard:
            a.insert(i, g)
            i = i + 1
    ws2 = min(a)
    return ws2

def get_sl(ticker):
    df = pyupbit.get_ohlcv(ticker, interval = "day", count = 1)
    return df.iloc[0]['open'] * 0.97

def get_target_price(ticker, k):
    df = pyupbit.get_ohlcv(ticker, interval="day", count=2)
    target_price = df.iloc[0]['close'] + (df.iloc[0]['high'] - df.iloc[0]['low']) * k
    return target_price

def get_start_time(ticker):
    df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_cur(ticker):
    return pyupbit.get_current_price(ticker)

def get_ld(ticker):
    ld = 0
    balance = upbit.get_balance(ticker)
    avg = float(balance['avg_buy_price'])
    cur = pyupbit.get_current_price(ticker)
    if avg * 1.1 < cur:
        ld = 1
    return ld

# 로그인
upbit = pyupbit.Upbit(access, secret)
print("Start Program Trading")

while True:                                                
    try:
        now = datetime.datetime.now()
        start_time = get_start_time("KRW-BTC")
        end_time = start_time + datetime.timedelta(days=1)
        if start_time < now < end_time - datetime.timedelta(minutes=10):
            if switch == 0:
                ticker = get_ticker()
                target_price = get_target_price(ticker, k)
                cur = get_cur(ticker)
                if target_price <= cur:
                    krw = upbit.get_balance("KRW")
                    if krw > 5000:                                         
                        upbit.buy_market_order(ticker, krw * 0.9995)
                        print(now, "---", ticker, "매수 주문이 체결되었습니다")
                        print("추정 매수 체결가 : %d" % (target_price))      
                        switch = 1
            
            if switch == 1:
                ws = get_ws(ticker)
                ws2 = get_ws2(ticker)
                cur = get_cur(ticker)
                btc = upbit.get_balance(ticker)
                sl = get_sl(ticker)
                ld = get_ld(ticker)
                if ws == 1 or ws2 * 0.997 < cur < ws2 * 1.003 or cur < sl or ld == 1:
                    upbit.sell_market_order(ticker, btc * 0.9995)
                    print(now, "---", ticker, "매도 주문이 체결되었습니다")
                    print("추정 매도 체결가 : %d" % (cur))
        
        elif now > end_time - datetime.timedelta(minutes=10):
            btc = upbit.get_balance(ticker)
            coin = get_coin()
            if btc > 0 and switch == 1:
                upbit.sell_market_order(ticker, btc * 0.9995)
            switch = 0
        time.sleep(1)
    except Exception as e:
        print(e)
        time.sleep(1)
